---
layout : post
summary : flask
---

### 요청 데이터 접근

```python
@app.route('/login', methods=['POST', 'GET'])
def login():
	error = None
	if request.method == 'POST':
		if valid_login(request.form['username'], request.form['password']):
			return log_the_user_in(request.form['username'])
		else:
			error = 'Invalid username/password

	return render_template('login.html', error = error)
```

### 파일 업로드
'''python
from flask import request
from werkzeug import secure_filename

@app.route('/upload', methods=['GET','POST'])
def upload_file():
	if request.method == 'POST':
		f = request.files['the_file']
		f.save('/var/www/upload/' + secure_filename(f.filename))
```

### 쿠키
쿠키에 접근하기 위해서는 `cookies` 속성을 사용한다. 쿠키를 저장하기 위해서는 `response` 객체의 `set_cookie`메소드를 사용한다. 

```python
# reading cookies
username = request.cookies.get('username')

# Storing cookies
resp = make_response(render_template(...))
resp.set_cookie('username', 'the username')
return resp
```

### 리다이렉션과 에러
사용자를 다른 엔드포인트로 이동시킬때 `redirect()`, 에러코드로 일찍 요청을 중단하기 원할때 `abort()`사용  
`errorhandler()` 데코레이터를 사용할 수 있다.

### 응답에 관하여
view 함수로부터 반환되는 값은 자동으로 response 객체로 변환된다. `make_response()`함수를 사용해 response 객체를 얻을 수 있다.

```python
@app.errorhandler(404)
def not_found(error):
	resp = make_response(render_template('error.html'), 404)
	resp.headers['X-something'] = 'A value'
	return resp

### 세션

세션은 쿠키 위에서 구현되어 지고, 암호화를 사용하여 그 쿠키를 서명한다. 사용자는 쿠키의 내용을 볼 수 있지만, 서명을 위해 사용된 비밀키를 알지 못한다면 쿠키의 내용을 변경할 수 없다.

```python
from flask import Flask, session, redirect, url_for, escape, request

app = Flask(__name__)

@app.route('/')
def index():
    if 'username' in session:
        return 'Logged in as %s' % escape(session['username'])
    return 'You are not logged in'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        session['username'] = request.form['username']
        return redirect(url_for('index'))
    return '''
        <form action="" method="post">
            <p><input type=text name=username>
            <p><input type=submit value=Login>
        </form>
    '''

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))

app.secret_key = 'secretkey'
```

## Flaskr
### 어플리케이션 셋업코드

### 데이터베이스 커넥션 요청하기
`before_request()` 요청 전에 호출되는 함수, `after_request()` 요청이 실행된 다음에 호출되는 함수이며 클라이언트에게 전송된 response 를 인자로 넘겨줘야 한다. 예외 상황은 `teardown_request()` 로 전달된다. 세 가지 데코레이터를 이용할 수 있다.

`g` 객체는 각 함수들에 대해서 오직 한 번의 요청에 대해서만 유효한 정보를 저장하고 있다.

### 뷰 함수들
##### 작성된 글 보여주기
커서를 통해 리턴되는 row들은 select 구문에서 명시된 순서대로 정리된 tuples이다. 뷰 함수는 검색된 항목들을 dict 타입으로 리턴한다.
 

